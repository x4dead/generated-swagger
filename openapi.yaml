  openapi: 3.0.3
  info:
    title: Swagger Task manager -   OpenAPI 
    description: |-
      This is a sample Task manager Server based on the OpenAPI 3.0 specification.
    version: 0.0.1
  # externalDocs:
  #   description: Find out more about Swagger
  #   url: http://swagger.io
  servers:
    - url: https://localhost:8080/
  paths:
    /task/add:
      post:
        tags:
          - task
        summary: Create task
        # description: This can only be done by the logged in user.
        operationId: createUser
        requestBody:
          required: true
          description: Cnamereated task object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskForUI'
            application/xml:
              schema:
                $ref: '#/components/schemas/TaskForUI'
            application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/TaskForUI'
        responses:
          default:
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/SuccessResponse'
              application/xml:
                schema:
                  $ref: '#/components/schemas/SuccessResponse'
    /task:  
      get:
        tags:
          - task
        summary: Get list of tasks
        operationId: getTasks
        responses:
          '200':
            description: Successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Tasks'          
              application/xml:
                schema:
                  $ref: '#/components/schemas/Tasks'
          default:
            description: successful operation
    /task/get:
      get:
        tags:
          - task
        summary: Get task by id
        description: ''
        operationId: getTaskById
        parameters:
          - name: id
            in: query
            # description: The
            required: true
            schema:
              type: integer
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                    $ref: '#/components/schemas/Task'          
               
          '400':
            description: Task with ID 1 not found
            content: 
              application/json: 
                schema:
                   $ref: '#/components/schemas/Exception'
    /task/update/{id}:
      put:
        tags:
          - task
        summary: Update task fields
        operationId: updateTaskById
        parameters: 
          - name: id
            in: path
            required: true
            schema: 
              type: integer
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/SuccessResponse'          
          '400':
            description: Task with ID 1 not found
            content: 
              application/json: 
                  schema:
                     $ref: '#/components/schemas/Exception'
    /task/delete/{id}:
      delete:
        tags:
          - task
        summary: Delete task fields
        operationId: deleteTaskById
        parameters: 
          - name: id
            in: path
            required: true
            schema: 
              type: integer
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/SuccessResponse'          
          '400':
            description: Task with ID 1 not found
            content: 
              application/json: 
                  schema:
                     $ref: '#/components/schemas/Exception'
  components: 
    schemas:
      SuccessResponse:
        type: object
        properties:
          data:
            type: string
            example: Task added successfully
        xml:
          name: category
      Exception:
        type: object
        properties:
          error:
            type: object
            properties:
              code:
               type: integer
              message:
                type: string
        xml:
          name: exception
      Task:
        type: object
        required: [name]
        properties:
          id:
            type: integer
            format: int64
            example: 1
          name:
            # required: true
            type: string
            example: task 1
          description:
            type: string
            example: This is description
          status:
            type: integer
            example: 0
            description: Task Status  
        xml:
          name: task
      TaskForUI:
          type: object
          required: [name]
          properties:
            name:
              type: string
              example: task 1
            description:
              type: string
              example: This is description
            status:
              type: integer
              example: 0
              description: Task Status  
          xml:
            name: task_ui   
      Tasks:
          description: List of task
          items: 
            $ref: '#/components/schemas/TaskForUI'
    requestBodies:
      Task:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
          application/xml:
            schema:
              $ref: '#/components/schemas/Task'
    # securitySchemes:
    #   petstore_auth:
    #     type: oauth2
    #     flows:
    #       implicit:
    #         authorizationUrl: https://petstore3.swagger.io/oauth/authorize
    #         scopes:
    #           write:pets: modify pets in your account
    #           read:pets: read your pets
      # api_key:
      #   type: apiKey
      #   name: api_key
        # in: header