/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.7.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Exception;
import org.openapitools.model.SuccessResponse;
import org.openapitools.model.Task;
import org.openapitools.model.TaskForUI;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-07-18T15:49:45.868580300+05:00[Asia/Almaty]", comments = "Generator version: 7.7.0")
@Validated
@Tag(name = "task", description = "the task API")
public interface TaskApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /task/add : Create task
     *
     * @param taskForUI Cnamereated task object (required)
     * @return successful operation (status code 200)
     */
    @Operation(
        operationId = "createUser",
        summary = "Create task",
        tags = { "task" },
        responses = {
            @ApiResponse(responseCode = "default", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SuccessResponse.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = SuccessResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/task/add",
        produces = { "application/json", "application/xml" },
        consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" }
    )
    
    default ResponseEntity<SuccessResponse> createUser(
        @Parameter(name = "TaskForUI", description = "Cnamereated task object", required = true) @Valid @RequestBody TaskForUI taskForUI
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : \"Task added successfully\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<category> <data>Task added successfully</data> </category>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /task/delete/{id} : Delete task fields
     *
     * @param id  (required)
     * @return successful operation (status code 200)
     *         or Task with ID 1 not found (status code 400)
     */
    @Operation(
        operationId = "deleteTaskById",
        summary = "Delete task fields",
        tags = { "task" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SuccessResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Task with ID 1 not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Exception.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/task/delete/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<SuccessResponse> deleteTaskById(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : \"Task added successfully\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : { \"code\" : 0, \"message\" : \"message\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /task/get : Get task by id
     * 
     *
     * @param id  (required)
     * @return successful operation (status code 200)
     *         or Task with ID 1 not found (status code 400)
     */
    @Operation(
        operationId = "getTaskById",
        summary = "Get task by id",
        description = "",
        tags = { "task" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Task.class))
            }),
            @ApiResponse(responseCode = "400", description = "Task with ID 1 not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Exception.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/task/get",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Task> getTaskById(
        @NotNull @Parameter(name = "id", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = true) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"task 1\", \"description\" : \"This is description\", \"id\" : 1, \"status\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : { \"code\" : 0, \"message\" : \"message\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /task : Get list of tasks
     *
     * @return Successful operation (status code 200)
     *         or successful operation (status code 200)
     */
    @Operation(
        operationId = "getTasks",
        summary = "Get list of tasks",
        tags = { "task" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TaskForUI.class))),
                @Content(mediaType = "application/xml", array = @ArraySchema(schema = @Schema(implementation = TaskForUI.class)))
            }),
            @ApiResponse(responseCode = "default", description = "successful operation")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/task",
        produces = { "application/json", "application/xml" }
    )
    
    default ResponseEntity<List<TaskForUI>> getTasks(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"name\" : \"task 1\", \"description\" : \"This is description\", \"status\" : 0 }, { \"name\" : \"task 1\", \"description\" : \"This is description\", \"status\" : 0 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<task_ui> <name>task 1</name> <description>This is description</description> <status>0</status> </task_ui>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /task/update/{id} : Update task fields
     *
     * @param id  (required)
     * @return successful operation (status code 200)
     *         or Task with ID 1 not found (status code 400)
     */
    @Operation(
        operationId = "updateTaskById",
        summary = "Update task fields",
        tags = { "task" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SuccessResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Task with ID 1 not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Exception.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/task/update/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<SuccessResponse> updateTaskById(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : \"Task added successfully\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : { \"code\" : 0, \"message\" : \"message\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
